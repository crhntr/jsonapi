// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/pivotal/go/src/github.com/crhntr/jsonapi/response_writers.go

// Package jsonapi is a generated GoMock package.
package jsonapi

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDataSetter is a mock of DataSetter interface
type MockDataSetter struct {
	ctrl     *gomock.Controller
	recorder *MockDataSetterMockRecorder
}

// MockDataSetterMockRecorder is the mock recorder for MockDataSetter
type MockDataSetterMockRecorder struct {
	mock *MockDataSetter
}

// NewMockDataSetter creates a new mock instance
func NewMockDataSetter(ctrl *gomock.Controller) *MockDataSetter {
	mock := &MockDataSetter{ctrl: ctrl}
	mock.recorder = &MockDataSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataSetter) EXPECT() *MockDataSetterMockRecorder {
	return m.recorder
}

// SetData mocks base method
func (m *MockDataSetter) SetData(resourceType, id string, attributes interface{}, relationships Relationships, links Links, meta Meta) error {
	ret := m.ctrl.Call(m, "SetData", resourceType, id, attributes, relationships, links, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetData indicates an expected call of SetData
func (mr *MockDataSetterMockRecorder) SetData(resourceType, id, attributes, relationships, links, meta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockDataSetter)(nil).SetData), resourceType, id, attributes, relationships, links, meta)
}

// MockDataAppender is a mock of DataAppender interface
type MockDataAppender struct {
	ctrl     *gomock.Controller
	recorder *MockDataAppenderMockRecorder
}

// MockDataAppenderMockRecorder is the mock recorder for MockDataAppender
type MockDataAppenderMockRecorder struct {
	mock *MockDataAppender
}

// NewMockDataAppender creates a new mock instance
func NewMockDataAppender(ctrl *gomock.Controller) *MockDataAppender {
	mock := &MockDataAppender{ctrl: ctrl}
	mock.recorder = &MockDataAppenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataAppender) EXPECT() *MockDataAppenderMockRecorder {
	return m.recorder
}

// AppendData mocks base method
func (m *MockDataAppender) AppendData(resourceType, id string, attributes interface{}, relationships Relationships, links Links, meta Meta) error {
	ret := m.ctrl.Call(m, "AppendData", resourceType, id, attributes, relationships, links, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendData indicates an expected call of AppendData
func (mr *MockDataAppenderMockRecorder) AppendData(resourceType, id, attributes, relationships, links, meta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendData", reflect.TypeOf((*MockDataAppender)(nil).AppendData), resourceType, id, attributes, relationships, links, meta)
}

// MockIdentitySetter is a mock of IdentitySetter interface
type MockIdentitySetter struct {
	ctrl     *gomock.Controller
	recorder *MockIdentitySetterMockRecorder
}

// MockIdentitySetterMockRecorder is the mock recorder for MockIdentitySetter
type MockIdentitySetterMockRecorder struct {
	mock *MockIdentitySetter
}

// NewMockIdentitySetter creates a new mock instance
func NewMockIdentitySetter(ctrl *gomock.Controller) *MockIdentitySetter {
	mock := &MockIdentitySetter{ctrl: ctrl}
	mock.recorder = &MockIdentitySetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentitySetter) EXPECT() *MockIdentitySetterMockRecorder {
	return m.recorder
}

// SetIdentity mocks base method
func (m *MockIdentitySetter) SetIdentity(resourceType, id string) error {
	ret := m.ctrl.Call(m, "SetIdentity", resourceType, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetIdentity indicates an expected call of SetIdentity
func (mr *MockIdentitySetterMockRecorder) SetIdentity(resourceType, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetIdentity", reflect.TypeOf((*MockIdentitySetter)(nil).SetIdentity), resourceType, id)
}

// MockIdentityAppender is a mock of IdentityAppender interface
type MockIdentityAppender struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityAppenderMockRecorder
}

// MockIdentityAppenderMockRecorder is the mock recorder for MockIdentityAppender
type MockIdentityAppenderMockRecorder struct {
	mock *MockIdentityAppender
}

// NewMockIdentityAppender creates a new mock instance
func NewMockIdentityAppender(ctrl *gomock.Controller) *MockIdentityAppender {
	mock := &MockIdentityAppender{ctrl: ctrl}
	mock.recorder = &MockIdentityAppenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentityAppender) EXPECT() *MockIdentityAppenderMockRecorder {
	return m.recorder
}

// AppendIdentity mocks base method
func (m *MockIdentityAppender) AppendIdentity(resourceType, id string) error {
	ret := m.ctrl.Call(m, "AppendIdentity", resourceType, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// AppendIdentity indicates an expected call of AppendIdentity
func (mr *MockIdentityAppenderMockRecorder) AppendIdentity(resourceType, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendIdentity", reflect.TypeOf((*MockIdentityAppender)(nil).AppendIdentity), resourceType, id)
}

// MockErrorAppender is a mock of ErrorAppender interface
type MockErrorAppender struct {
	ctrl     *gomock.Controller
	recorder *MockErrorAppenderMockRecorder
}

// MockErrorAppenderMockRecorder is the mock recorder for MockErrorAppender
type MockErrorAppenderMockRecorder struct {
	mock *MockErrorAppender
}

// NewMockErrorAppender creates a new mock instance
func NewMockErrorAppender(ctrl *gomock.Controller) *MockErrorAppender {
	mock := &MockErrorAppender{ctrl: ctrl}
	mock.recorder = &MockErrorAppenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockErrorAppender) EXPECT() *MockErrorAppenderMockRecorder {
	return m.recorder
}

// AppendError mocks base method
func (m *MockErrorAppender) AppendError(err error) {
	m.ctrl.Call(m, "AppendError", err)
}

// AppendError indicates an expected call of AppendError
func (mr *MockErrorAppenderMockRecorder) AppendError(err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendError", reflect.TypeOf((*MockErrorAppender)(nil).AppendError), err)
}

// MockIncluder is a mock of Includer interface
type MockIncluder struct {
	ctrl     *gomock.Controller
	recorder *MockIncluderMockRecorder
}

// MockIncluderMockRecorder is the mock recorder for MockIncluder
type MockIncluderMockRecorder struct {
	mock *MockIncluder
}

// NewMockIncluder creates a new mock instance
func NewMockIncluder(ctrl *gomock.Controller) *MockIncluder {
	mock := &MockIncluder{ctrl: ctrl}
	mock.recorder = &MockIncluderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIncluder) EXPECT() *MockIncluderMockRecorder {
	return m.recorder
}

// Include mocks base method
func (m *MockIncluder) Include(resourceType, id string, attributes interface{}, relationships Relationships, links Links, meta Meta) error {
	ret := m.ctrl.Call(m, "Include", resourceType, id, attributes, relationships, links, meta)
	ret0, _ := ret[0].(error)
	return ret0
}

// Include indicates an expected call of Include
func (mr *MockIncluderMockRecorder) Include(resourceType, id, attributes, relationships, links, meta interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Include", reflect.TypeOf((*MockIncluder)(nil).Include), resourceType, id, attributes, relationships, links, meta)
}

// MockDataCollectionSetter is a mock of DataCollectionSetter interface
type MockDataCollectionSetter struct {
	ctrl     *gomock.Controller
	recorder *MockDataCollectionSetterMockRecorder
}

// MockDataCollectionSetterMockRecorder is the mock recorder for MockDataCollectionSetter
type MockDataCollectionSetterMockRecorder struct {
	mock *MockDataCollectionSetter
}

// NewMockDataCollectionSetter creates a new mock instance
func NewMockDataCollectionSetter(ctrl *gomock.Controller) *MockDataCollectionSetter {
	mock := &MockDataCollectionSetter{ctrl: ctrl}
	mock.recorder = &MockDataCollectionSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataCollectionSetter) EXPECT() *MockDataCollectionSetterMockRecorder {
	return m.recorder
}

// SetDataCollection mocks base method
func (m *MockDataCollectionSetter) SetDataCollection() {
	m.ctrl.Call(m, "SetDataCollection")
}

// SetDataCollection indicates an expected call of SetDataCollection
func (mr *MockDataCollectionSetterMockRecorder) SetDataCollection() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDataCollection", reflect.TypeOf((*MockDataCollectionSetter)(nil).SetDataCollection))
}
